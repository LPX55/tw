/** * * 消費資料處理作業 * * @author  ace * * @version 2013/10/10 初始版本。 * * @description  * * @see  * * {@link http://www.nodebeginner.org/index-zh-tw.html Node入門} * {@link https://github.com/mapbox/node-sqlite3/issues/3 Transaction API} * * @todo  * * @comment * */(function() {	var Consumptions;	var ProductNameStatistics;	var ClassifyNameStatistics;	var ConsumptionsDAO;	var ProductNameStatisticsDAO;	var ClassifyNameStatisticsDAO;  /**   *   * 消費資料寫入作業   *   * @author  ace   *   * @version 2013/10/10 初始版本。   *   * @description 寫入資料時一併處理統計資料。    *   * @see    *   * {@link http://www.nodebeginner.org/index-zh-tw.html Node入門}   * {@link https://github.com/mapbox/node-sqlite3/issues/3 Transaction API}   *   * @todo    *   */  var doInsertConsumptions = function(conn, consumptions, callback) {		var consumptionsDAO = new ConsumptionsDAO(conn);    var productNameStatisticsDAO = new ProductNameStatisticsDAO(conn);    var classifyNameStatisticsDAO = new ClassifyNameStatisticsDAO(conn);		    function beforeCallback(lastID, changes) {      if (typeof callback === 'function') callback(lastID, changes);      }    function insertConsumptions(lastID, changes) {        if (lastID) {            beforeCallback(lastID, changes);      }      else {            consumptionsDAO.doInsert(consumptions, beforeCallback);      }    }      function checkProductNameStatistics(err, rowCount, selectResult) {        var productNameStatistics = new ProductNameStatistics();        // todo:增加檢查Select回傳值是否正確。      if (selectResult.length === 0) {             productNameStatistics.setProductName(consumptions.getProductName());        productNameStatistics.setNumberOfTimes(1);        productNameStatistics.setUserCode(consumptions.getInsertUserCode());              productNameStatisticsDAO.doInsert(productNameStatistics, insertConsumptions);      }      else {            productNameStatistics = selectResult[0];        productNameStatistics.setNumberOfTimes(productNameStatistics.getNumberOfTimes() + 1);              productNameStatisticsDAO.doUpdate(productNameStatistics, insertConsumptions);      }    }      function beforeInsertProductNameStatistics(lastID, changes) {        var productNameStatistics = new ProductNameStatistics();        if (lastID) {            beforeCallback(lastID, changes);      }      else {            productNameStatisticsDAO.doSelectByProductName(consumptions.getInsertUserCode(), consumptions.getProductName(), checkProductNameStatistics);      }    }      function checkClassifyNameStatistics(err, rowCount, selectResult) {        var classifyNameStatistics = new ClassifyNameStatistics();      if (selectResult.length === 0) {             classifyNameStatistics.setClassifyName(consumptions.getClassifyName());        classifyNameStatistics.setNumberOfTimes(1);        classifyNameStatistics.setUserCode(consumptions.getInsertUserCode());          classifyNameStatisticsDAO.doInsert(classifyNameStatistics, beforeInsertProductNameStatistics);      }      else {            classifyNameStatistics = selectResult[0];        classifyNameStatistics.setNumberOfTimes(classifyNameStatistics.getNumberOfTimes() + 1);              classifyNameStatisticsDAO.doUpdate(classifyNameStatistics, beforeInsertProductNameStatistics);      }    }      // 沒有分類名稱之狀況？    classifyNameStatisticsDAO.doSelectByClassifyName(consumptions.getInsertUserCode(), consumptions.getClassifyName(), checkClassifyNameStatistics);  }	  /**   *   * 從Value Object Array寫入資料   *   * @author  ace   *   * @version 2014/01/24 初始版本。   *   * @description    *   * @see <a href="http://www.nodebeginner.org/index-zh-tw.html">Node入門</a>   *   * {@link http://www.nodebeginner.org/index-zh-tw.html Node入門}   *   * @require    *   * @comment    *   * @todo    *   */  var doInsertConsumptionsByVOArray = function(conn, voArray, callback) {      function beforeCallback(lastID, changes) {          if (lastID) {            if (typeof callback === 'function') callback(lastID, changes);      }      else {            if (numIndex < voArray.length) {                  doInsertConsumptions(conn, voArray[numIndex++], beforeCallback);        }        else {                  if (typeof callback === 'function') callback(lastID, changes);          }      }    }          var numIndex = 0;        if (voArray.length !== 0) beforeCallback();  }		if (typeof define === 'function') {			define(['Consumptions', 'ProductNameStatistics', 'ClassifyNameStatistics', 'ConsumptionsDAO', 'ProductNameStatisticsDAO', 'ClassifyNameStatisticsDAO'], function(dConsumptions, dProductNameStatistics, dClassifyNameStatistics, dConsumptionsDAO, dProductNameStatisticsDAO, dClassifyNameStatisticsDAO) { 					Consumptions = dConsumptions;			ProductNameStatistics = dProductNameStatistics;			ClassifyNameStatistics = dClassifyNameStatistics;			ConsumptionsDAO = dConsumptionsDAO;			ProductNameStatisticsDAO = dProductNameStatisticsDAO;			ClassifyNameStatisticsDAO = dClassifyNameStatisticsDAO;				return {  				doInsertConsumptions: doInsertConsumptions,				doInsertConsumptionsByVOArray: doInsertConsumptionsByVOArray			}		});	}	else if (typeof exports !== 'undefined') {			Consumptions = require(RequireJSConfig.paths['Consumptions'] + '.js');		ProductNameStatistics = require(RequireJSConfig.paths['ProductNameStatics'] + '.js');		ClassifyNameStatistics = require(RequireJSConfig.paths['ClassifyNameStatistics'] + '.js');		ConsumptionsDAO = require(RequireJSConfig.paths['ConsumptionsDAO'] + '.js');		ProductNameStatisticsDAO = require(RequireJSConfig.paths['ProductNameStatisticsDAO'] + '.js');		ClassifyNameStatisticsDAO = require(RequireJSConfig.paths['ClassifyNameStatisticsDAO'] + '.js');					module.exports = doInsertConsumptions;		module.exports = doInsertConsumptionsByVOArray;	}})();