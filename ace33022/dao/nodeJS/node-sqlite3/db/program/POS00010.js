/** * * POS資料處理作業 * * @author  ace * * @version 2013/04/11 初始版本。 * @version 2015/01/26 調整成可提供requirejs、require(CommonJS格式)使用。 * * @description  * * @see  * * {@link http://www.nodebeginner.org/index-zh-tw.html Node入門} * {@link https://github.com/mapbox/node-sqlite3/issues/3 Transaction API} * * @todo  * * @comment * */ (function() { 	var sprintf = sprintfjs.sprintf;	var POSTrnLogs;	var POSTrnLogsDetail;	var POSTrnLogsDAO;	var POSTrnLogsDetailDAO;  /**   *   * POS交易資料寫入作業   *   * @author  ace   *   * @version 2014/05/01 初始版本。   *   * @description    *   * @see    *   * @todo    *   */  var doInsertPOSTrn = function(conn, posTrnLogs, posTrnLogsDetailArray, callback) {    function beforeCallback(lastID, changes) {			if (lastID) console.log(lastID);						if (typeof callback === 'function') callback(lastID, changes);      }		// 寫入POS資料    function insertPOSTrnLogs(lastID, changes) {        if (lastID) {            beforeCallback(lastID, changes);      }      else {            posTrnLogsDAO.doInsert(posTrnLogs, beforeCallback);      }    }  	  // 寫入POS明細資料    function insertPOSTrnLogsDetail(callback) {  			function beforeCallback(lastID, changes) {    		    var vo;								if (lastID) {    					if (typeof callback === 'function') callback(lastID, changes);				}				else {    					if (numIndex < posTrnLogsDetailArray.length) {        						vo = posTrnLogsDetailArray[numIndex++];												vo.setTrnNo(posTrnLogs.getTrnNo());						vo.setSerNo(sprintf('%05d', numIndex));												posTrnLogsDetailDAO.doInsert(vo, beforeCallback);					}					else {        						if (typeof callback === 'function') callback(lastID, changes);  					}				}			}      			var numIndex = 0;    			if (posTrnLogsDetailArray.length !== 0) beforeCallback();		}				function setTrnNo(err, rowCount, selectResult) {					var numSerDigits = 4;			var vo;			var numSerNo = 0;						if (selectResult.length !== 0) {						  vo = selectResult.pop();				numSerNo = new Number(vo.getTrnNo().substr(8, numSerDigits));			}						// posTrnLogs.setTrnNo(posTrnLogs.getTrnDate() + sprintf('%04d', ++numSerNo));			posTrnLogs.setTrnNo(posTrnLogs.getTrnDate() + sprintf('%0' + String(numSerDigits) + 'd', ++numSerNo));						insertPOSTrnLogsDetail(insertPOSTrnLogs);		}		  var posTrnLogsDAO = new POSTrnLogsDAO(conn);		var posTrnLogsDetailDAO = new POSTrnLogsDetailDAO(conn);				posTrnLogsDAO.doSelectByTrnDate(posTrnLogs.getTrnDate(), setTrnNo);  }  	if (typeof define === 'function') {			define(['sprintfjs', 'POSTrnLogs', 'POSTrnLogsDetail', 'POSTrnLogsDAO', 'POSTrnLogsDetailDAO'], function (sprintfjs, dPOSTrnLogs, dPOSTrnLogsDetail, dPOSTrnLogsDAO, dPOSTrnLogsDetailDAO) { 					sprintf = sprintfjs.sprintf;			POSTrnLogs = dPOSTrnLogs;			POSTrnLogsDetail = dPOSTrnLogsDetail;			POSTrnLogsDAO = dPOSTrnLogsDAO;			POSTrnLogsDetailDAO = dPOSTrnLogsDetailDAO;				return {  				doInsertPOSTrn: doInsertPOSTrn			}		});	}	else if (typeof exports !== 'undefined') {			sprintf = require(RequireJSConfig.paths['sprintfjs'] + '.js').sprintf;		POSTrnLogs = require(RequireJSConfig.paths['POSTrnLogs'] + '.js');		POSTrnLogsDetail = require(RequireJSConfig.paths['POSTrnLogsDetail'] + '.js');		POSTrnLogsDAO = require(RequireJSConfig.paths['POSTrnLogsDAO'] + '.js');		POSTrnLogsDetailDAO = require(RequireJSConfig.paths['POSTrnLogsDetailDAO'] + '.js');				module.exports = doInsertPOSTrn;	}})();