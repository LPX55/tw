/** * * INV00010 * * @author  ace * * @version 2014/01/24 初始版本。 * @version 2015/01/26 調整成可提供requirejs、require(CommonJS格式)使用。 * * @description  * * @see  * * {@link http://www.nodebeginner.org/index-zh-tw.html Node入門} * {@link https://github.com/mapbox/node-sqlite3/issues/3 Transaction API} * * @todo  * */(function() { 	var sprintf;		var	InvoiceLogs;	var	InvoicePrizeLogs;	var	InvoiceMatchPrizeLogs;	var InvoiceLogsDAO;	var	InvoicePrizeLogsDAO;	var	InvoiceMatchPriaceLogsDAO;  /**   *   * 查詢中獎發票資料   *   * @author ace   *   * @version 2015/05/28 初始版本。   *   * @description    *   * @see <a href="http://www.nodebeginner.org/index-zh-tw.html">Node入門</a>	 * @see <a href="http://www.richardrodger.com/2011/04/21/node-js-how-to-write-a-for-loop-with-callbacks/">Node.js – How to Write a For Loop With Callbacks</a>   *   * {@link http://www.nodebeginner.org/index-zh-tw.html Node入門}	 * {@link http://www.richardrodger.com/2011/04/21/node-js-how-to-write-a-for-loop-with-callbacks/ Node.js – How to Write a For Loop With Callbacks}   *   * @require    *   * @comment    *   * @todo    *   */	var doSelectMatchPrizeInvoiceNo = function(conn, userCode, inYearMonth, callback) {			var invoicePrizeLogsDAO = new InvoicePrizeLogsDAO(conn);		var invoiceLogsDAO = new InvoiceLogsDAO(conn);				var result = new Array();				var chkMatchPrize = function(inYearMonth, invoicePrizeLogs, callback) {					var searchInvoiceNo = '';						if (invoicePrizeLogs.getPrizeItem() == '0100') {								// 特別獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo();			}			else if (invoicePrizeLogs.getPrizeItem() == '0000') {									// 特獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo();			}			else if (invoicePrizeLogs.getPrizeItem() == '0001') {									// 頭獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo();			}			else if (invoicePrizeLogs.getPrizeItem() == '0002') {									// 二獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo().substring(1);			}			else if (invoicePrizeLogs.getPrizeItem() == '0003') {									// 三獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo().substring(2);			}			else if (invoicePrizeLogs.getPrizeItem() == '0004') {								// 四獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo().substring(3);			}			else if (invoicePrizeLogs.getPrizeItem() == '0005') {									// 五獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo().substring(4);			}			else if (invoicePrizeLogs.getPrizeItem() == '0006') {									// 六獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo().substring(5);			}			else if (invoicePrizeLogs.getPrizeItem() == '0101') {								// 增開六獎				searchInvoiceNo = '%' + invoicePrizeLogs.getInvoiceNo();			}			invoiceLogsDAO.doSelectLikeInvoiceNo(userCode, inYearMonth, searchInvoiceNo, function(err, rowCount, selectResult) {							var invoiceLogs;				var invoiceMatchPrizeLogs;							var numIndex;								if (err) console.log(err);							for (numIndex = 0; numIndex < selectResult.length; numIndex++) {								invoiceLogs = selectResult[numIndex];									invoiceMatchPrizeLogs = new InvoiceMatchPrizeLogs();								invoiceMatchPrizeLogs.setUserCode(userCode);					invoiceMatchPrizeLogs.setInYearMonth(invoiceLogs.getInYearMonth());					invoiceMatchPrizeLogs.setInvoiceNo(invoiceLogs.getInvoiceNo());							invoiceMatchPrizeLogs.setPrizeItem(invoicePrizeLogs.getPrizeItem());								result.push(invoiceMatchPrizeLogs);				}				if ((parseInt(invoicePrizeLogs.getPrizeItem()) >= 1) && (parseInt(invoicePrizeLogs.getPrizeItem()) < 6)) {										if (selectResult.length == 0) {										invoicePrizeLogs.setPrizeItem(sprintf('%04d', parseInt(invoicePrizeLogs.getPrizeItem()) + 1));											chkMatchPrize(inYearMonth, invoicePrizeLogs, callback);					}					else {												callback();					}				}				else {										callback();				}			});		}				var getMatchPrizes = function(inYearMonth, invoicePrizeLogs, callback) {					var vo = invoicePrizeLogs.shift();						if (vo) {							chkMatchPrize(inYearMonth, vo, function() {									getMatchPrizes(inYearMonth, invoicePrizeLogs, callback);				});			}			else {							callback();			}		}				var getPrizeInvoiceNoByInYearMonthShiftPrizeItems = function(inYearMonth, prizeItems, callback) {					var prizeItem = prizeItems.shift();						if (prizeItem) {							invoicePrizeLogsDAO.doSelectByInYearMonthAndPrizeItem(inYearMonth, prizeItem, function(err, rowCount, selectResult) {								getMatchPrizes(inYearMonth, selectResult, function() {												getPrizeInvoiceNoByInYearMonthShiftPrizeItems(inYearMonth, prizeItems, callback);					});				});			}			else {							callback();			}		}				var getAllPrizeInvoiceNoShiftInYearMonth = function(arrInYearMonth, callback) {			var inYearMonth = arrInYearMonth.shift();						if (inYearMonth) {							getPrizeInvoiceNoByInYearMonthShiftPrizeItems(inYearMonth, ['0000', '0100', '0001', '0101'], function() {									getAllPrizeInvoiceNoShiftInYearMonth(arrInYearMonth, callback);				});			}			else {							callback();			}		}				if (!inYearMonth) {						// 查詢使用者所有中獎資料。			invoiceLogsDAO.doSelectByGroupInYearMonth(userCode, function(err, rowCount, selectResult) {							var arrInYearMonth = new Array();				var numIndex = new Number(0);								for (numIndex; numIndex < selectResult.length; numIndex++) arrInYearMonth.push(selectResult[numIndex].getInYearMonth());							getAllPrizeInvoiceNoShiftInYearMonth(arrInYearMonth, function() {									callback(result);	// 最上層回呼函數。				});			});		}		else {					// 查詢指定年月中獎資料。			getPrizeInvoiceNoByInYearMonthShiftPrizeItems(inYearMonth, ['0000', '0100', '0001', '0101'], function() {							callback(result);	// 最上層回呼函數。			});		}	}		if (typeof define === 'function') {			define(['sprintfjs', 'InvoiceLogs', 'InvoicePrizeLogs', 'InvoiceMatchPrizeLogs', 'InvoiceLogsDAO', 'InvoicePrizeLogsDAO'], function(sprintfjs, dInvoiceLogs, dInvoicePrizeLogs, dInvoiceMatchPrizeLogs, dInvoiceLogsDAO, dInvoicePrizeLogsDAO) { 					sprintf = sprintfjs.sprintf;						InvoiceLogs = dInvoiceLogs;			InvoicePrizeLogs = dInvoicePrizeLogs;			InvoiceMatchPrizeLogs = dInvoiceMatchPrizeLogs;			InvoiceLogsDAO = dInvoiceLogsDAO;			InvoicePrizeLogsDAO = dInvoicePrizeLogsDAO;						return {  				doSelectMatchPrizeInvoiceNo: doSelectMatchPrizeInvoiceNo			}		});	}	else if (typeof exports !== 'undefined') {			sprintf = require(RequireJSConfig.paths['sprintfjs'] + '.js').sprintf;				InvoiceLogs = require(RequireJSConfig.paths['InvoiceLogs'] + '.js');		InvoicePrizeLogs = require(RequireJSConfig.paths['InvoicePrizeLogs'] + '.js');		InvoiceMatchPrizeLogs = require(RequireJSConfig.paths['InvoiceMatchPrizeLogs'] + '.js');		InvoiceLogsDAO = require(RequireJSConfig.paths['InvoiceLogsDAO'] + '.js');		InvoicePrizeLogsDAO = require(RequireJSConfig.paths['InvoicePrizeLogsDAO'] + '.js');					module.exports = doSelectMatchPrizeInvoiceNo;	}})();